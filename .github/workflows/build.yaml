name: Build

on:
  push:
    branches:
    - master
    tags:
    - '*'
  pull_request:
    branches:
    - master

defaults:
  run:
    shell: bash

env:
  # Increment this key to invalidate the cache.
  CACHE_KEY: 0

jobs:
  all:
    name: All

    strategy:
      matrix:
        target:
        - x86_64-apple-darwin
        - x86_64-pc-windows-msvc
        - x86_64-unknown-linux-gnu
        include:
        - target: x86_64-apple-darwin
          os: macos-latest
          rustflags: --deny warnings
        - target: x86_64-pc-windows-msvc
          os: windows-latest
          rustflags: --deny warnings --codegen=target-feature=+crt-static
        - target: x86_64-unknown-linux-gnu
          os: ubuntu-latest
          rustflags: --deny warnings

    runs-on: ${{ matrix.os }}

    env:
      RUSTFLAGS: ${{ matrix.rustflags }}

    steps:
    - uses: actions/checkout@v2

    - name: Run Info
      run: echo ${{ github }}

    # An issue with BSD Tar causes sporadic failures on macOS.
    # c.f https://github.com/actions/cache/issues/403
    - name: Install GNU Tar
      if: matrix.os == 'macos-latest'
      run: |
        brew install gnu-tar
        echo /usr/local/opt/gnu-tar/libexec/gnubin > $GITHUB_PATH

    - name: Make openssl-src Use Strawberry Perl
      if: matrix.os == 'windows-latest'
      run: echo OPENSSL_SRC_PERL=C:/Strawberry/perl/bin/perl >> $GITHUB_ENV

    - name: Cache
      uses: actions/cache@v2
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ env.CACHE_KEY }}-${{ runner.os }}-${{ github.sha }}
        restore-keys: ${{ env.CACHE_KEY }}-${{ runner.os }}-

    - name: Install Rust Toolchain Components
      run: |
        rustup component add clippy rustfmt
        rustup target add ${{ matrix.target }}
        rustup default `cat rust-toolchain`-${{ matrix.target }}

    - name: Rust Info
      run: |
        rustup --version
        cargo --version
        cargo clippy --version
        cargo fmt --version

    - name: Check Lockfile
      run: |
        cargo update --locked --package agora

    - name: Check
      run: |
        cargo check --all
        cargo check --tests
        cargo check --tests --all-features

    - name: Test
      run: |
        cargo test --all --all-features
        cargo test --test integration

    - name: Clippy
      run: |
        cargo clippy --all-targets --all-features
        cargo clippy --all-targets --all-features --tests

    - name: Check Formatting
      run: cargo fmt --all -- --check

    - name: Check for Forbidden Words
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install ripgrep
        ./bin/forbid

    - name: Package
      id: package
      if: startsWith(github.ref, 'refs/tags/') || github.ref == 'refs/heads/package-on-master'
      env:
        TARGET: ${{ matrix.target }}
        REF: ${{ github.ref }}
        OS: ${{ matrix.os }}
      run: ./bin/package

    - name: Prerelease Check
      id: is_prerelease
      run: cargo run --package prerelease -- --reference ${{ github.ref }}

    - name: Publish
      uses: softprops/action-gh-release@v0.1.5
      if: startsWith(github.ref, 'refs/tags/')
      with:
        draft: false
        files: ${{ steps.package.outputs.archive }}
        prerelease: ${{ steps.is_prerelease.outputs.value }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
